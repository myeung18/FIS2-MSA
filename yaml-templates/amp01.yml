base_env: &base_env
- name: RAILS_ENV
  value: "production"
- name: DATABASE_URL
  value: "mysql2://root:${MYSQL_ROOT_PASSWORD}@system-mysql/${MYSQL_DATABASE}"
- name: FORCE_SSL
  value: "true"
- name: THREESCALE_SUPERDOMAIN
  value: "${WILDCARD_DOMAIN}"
- name: MASTER_DOMAIN
  value: "${MASTER_NAME}"
- name: MASTER_USER
  value: "${MASTER_USER}"
- name: MASTER_PASSWORD
  value: "${MASTER_PASSWORD}"
- name: TENANT_NAME
  value: "${TENANT_NAME}"
- name: APICAST_ACCESS_TOKEN
  value: "${APICAST_ACCESS_TOKEN}"
- name: ADMIN_ACCESS_TOKEN
  value: "${ADMIN_ACCESS_TOKEN}"
- name: PROVIDER_PLAN
  value: 'enterprise'
- name: USER_LOGIN
  value: "${ADMIN_USERNAME}"
- name: USER_PASSWORD
  value: "${ADMIN_PASSWORD}"
- name: RAILS_LOG_TO_STDOUT
  value: "true"
- name: RAILS_LOG_LEVEL
  value: "info"
- name: THINKING_SPHINX_ADDRESS
  value: "system-sphinx"
- name: THINKING_SPHINX_PORT
  value: "9306"
- name: THINKING_SPHINX_CONFIGURATION_FILE
  value: "/tmp/sphinx.conf"
- name: EVENTS_SHARED_SECRET
  value: "${SYSTEM_BACKEND_SHARED_SECRET}"
- name: THREESCALE_SANDBOX_PROXY_OPENSSL_VERIFY_MODE
  value: "VERIFY_NONE"
- name: APICAST_BACKEND_ROOT_ENDPOINT
  value: "https://backend-${TENANT_NAME}.${WILDCARD_DOMAIN}"
- name: CONFIG_INTERNAL_API_USER
  value: "${SYSTEM_BACKEND_USERNAME}"
- name: CONFIG_INTERNAL_API_PASSWORD
  value: "${SYSTEM_BACKEND_PASSWORD}"
- name: SECRET_KEY_BASE
  value: "${SYSTEM_APP_SECRET_KEY_BASE}"
- name: AMP_RELEASE
  value: "${AMP_RELEASE}"
- name: ZYNC_AUTHENTICATION_TOKEN
  valueFrom:
    secretKeyRef:
      name: zync
      key: ZYNC_AUTHENTICATION_TOKEN
- name: SMTP_ADDRESS
  valueFrom:
    configMapKeyRef:
      name: smtp
      key: address
- name: SMTP_USER_NAME
  valueFrom:
    configMapKeyRef:
      name: smtp
      key: username
- name: SMTP_PASSWORD
  valueFrom:
    configMapKeyRef:
      name: smtp
      key: password
- name: SMTP_DOMAIN
  valueFrom:
    configMapKeyRef:
      name: smtp
      key: domain
- name: SMTP_PORT
  valueFrom:
    configMapKeyRef:
      name: smtp
      key: port
- name: SMTP_AUTHENTICATION
  valueFrom:
    configMapKeyRef:
      name: smtp
      key: authentication
- name: SMTP_OPENSSL_VERIFY_MODE
  valueFrom:
    configMapKeyRef:
      name: smtp
      key: openssl.verify.mode
- name: BACKEND_ROUTE
  value: "https://backend-${TENANT_NAME}.${WILDCARD_DOMAIN}"
- name: SSL_CERT_DIR
  value: "/etc/pki/tls/certs"
- name: APICAST_REGISTRY_URL
  value: "${APICAST_REGISTRY_URL}"

apiVersion: v1
kind: Template
metadata:
  name: 3scale-api-management
  labels:
    application: 3scale-amp
  annotations:
    openshift.io/display-name: 3scale API Management
    openshift.io/provider-display-name: Red Hat, Inc.
    iconClass: icon-3scale
    description: >-
      3scale API Management main system
    tags: integration, api management, 3scale
message: "Login on https://${TENANT_NAME}-admin.${WILDCARD_DOMAIN} as ${ADMIN_USERNAME}/${ADMIN_PASSWORD}"
objects:

- kind: ImageStream
  apiVersion: v1
  metadata:
    name: amp-system
    labels:
      application: 3scale-amp
      service: system
    annotations:
      openshift.io/display-name: AMP System
  spec:
    tags:
    - name: latest
      annotations:
        openshift.io/display-name: AMP System (latest)
      from:
        kind: ImageStreamTag
        name: "${AMP_RELEASE}"
    - name: "${AMP_RELEASE}"
      annotations:
        openshift.io/display-name: AMP system ${AMP_RELEASE}
      from:
        kind: DockerImage
        name: registry.access.redhat.com/3scale-amp22/system:1.7
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: amp-backend
    labels:
      application: 3scale-amp
      service: backend
    annotations:
      openshift.io/display-name: AMP backend
  spec:
    tags:
    - name: latest
      annotations:
        openshift.io/display-name: amp-backend (latest)
      from:
        kind: ImageStreamTag
        name: "${AMP_RELEASE}"
    - name: "${AMP_RELEASE}"
      annotations:
        openshift.io/display-name: amp-backend ${AMP_RELEASE}
      from:
        kind: DockerImage
        name: registry.access.redhat.com/3scale-amp22/backend:1.6
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: amp-apicast
    labels:
      application: 3scale-amp
      service: apicast
    annotations:
      openshift.io/display-name: AMP APIcast
  spec:
    tags:
    - name: latest
      annotations:
        openshift.io/display-name: AMP APIcast (latest)
      from:
        kind: ImageStreamTag
        name: "${AMP_RELEASE}"
    - name: "${AMP_RELEASE}"
      annotations:
        openshift.io/display-name: AMP APIcast ${AMP_RELEASE}
      from:
        kind: DockerImage
        name: registry.access.redhat.com/3scale-amp22/apicast-gateway:1.8
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: amp-wildcard-router
    labels:
      application: 3scale-amp
      service: wildcard-router
    annotations:
      openshift.io/display-name: AMP APIcast Wildcard Router
  spec:
    tags:
    - name: latest
      annotations:
        openshift.io/display-name: AMP APIcast Wildcard Router (latest)
      from:
        kind: ImageStreamTag
        name: "${AMP_RELEASE}"
    - name: "${AMP_RELEASE}"
      annotations:
        openshift.io/display-name: AMP APIcast Wildcard Router ${AMP_RELEASE}
      from:
        kind: DockerImage
        name: registry.access.redhat.com/3scale-amp22/wildcard-router:1.6

- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: system-storage
    labels:
      application: 3scale-amp
      service: system
      system: app
  spec:
    accessModes:
    - ReadWriteMany
    resources:
      requests:
        storage: 100Mi

- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: mysql-storage
    labels:
      application: 3scale-amp
      service: system
      system: mysql
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi

- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: system-redis-storage
    labels:
      application: 3scale-amp
      service: system
      system: redis
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi

- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: backend-redis-storage
    labels:
      application: 3scale-amp
      service: backend
      backend: redis
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: backend-cron
    labels:
      application: 3scale-amp
      service: backend
      backend: cron
  spec:
    replicas: 1
    selector:
      deploymentConfig: backend-cron
    strategy:
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          deploymentConfig: backend-cron
          application: 3scale-amp
          service: backend
          backend: cron
      spec:
        initContainers:
        - name: backend-redis-svc
          image: registry.access.redhat.com/rhel-atomic:7.5
          command: ['sh', '-c', 'until $(echo -n > /dev/tcp/backend-redis/6379); do sleep $SLEEP_SECONDS; done']
          activeDeadlineSeconds: 600
          env:
          - name: SLEEP_SECONDS
            value: "10"
        containers:
        - args:
          - backend-cron
          env:
          - name: CONFIG_REDIS_PROXY
            value: redis://backend-redis:6379/0
          - name: CONFIG_REDIS_SENTINEL_HOSTS
            value: ""
          - name: CONFIG_REDIS_SENTINEL_ROLE
            value: ""
          - name: CONFIG_QUEUES_MASTER_NAME
            value: redis://backend-redis:6379/1
          - name: CONFIG_QUEUES_SENTINEL_HOSTS
            value: ""
          - name: CONFIG_QUEUES_SENTINEL_ROLE
            value: ""
          - name: RACK_ENV
            value: "production"
          image: amp-backend:latest
          imagePullPolicy: IfNotPresent
          name: backend-cron
          resources:
            limits:
              cpu: 150m
              memory: 80Mi
            requests:
              cpu: 50m
              memory: 40Mi
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - backend-cron
        from:
          kind: ImageStreamTag
          name: amp-backend:latest

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: backend-redis
    labels:
      application: 3scale-amp
      service: backend
      backend: redis
  spec:
    replicas: 1
    selector:
      deploymentConfig: backend-redis
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          deploymentConfig: backend-redis
          application: 3scale-amp
          service: backend
          backend: redis
      spec:
        containers:
        - image: ${REDIS_IMAGE}
          imagePullPolicy: IfNotPresent
          name: backend-redis
          command:
          - "/opt/rh/rh-redis32/root/usr/bin/redis-server"
          args:
          -  "/etc/redis.d/redis.conf"
          -  "--daemonize"
          -  "no"
          resources:
            limits:
              cpu: 2000m
              memory: 32Gi
            requests:
              cpu: 1000m
              memory: 1024Mi
          readinessProbe:
            exec:
              command:
              - "container-entrypoint"
              - "bash"
              - "-c"
              - "redis-cli set liveness-probe \"`date`\" | grep OK"
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 1
          livenessProbe:
            tcpSocket:
              port: 6379
            initialDelaySeconds: 10
            periodSeconds: 10
          volumeMounts:
          - name: backend-redis-storage
            mountPath: "/var/lib/redis/data"
          - name: redis-config
            mountPath: /etc/redis.d/
        volumes:
        - name: backend-redis-storage
          persistentVolumeClaim:
            claimName: backend-redis-storage
        - name: redis-config
          configMap:
            name: redis-config
            items:
            - key: redis.conf
              path: redis.conf
    triggers:
    - type: ConfigChange

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: backend-listener
    labels:
      application: 3scale-amp
      service: backend
      backend: listener
  spec:
    replicas: 1
    selector:
      deploymentConfig: backend-listener
    strategy:
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          deploymentConfig: backend-listener
          application: 3scale-amp
          service: backend
          backend: listener
      spec:
        containers:
        - args:
          - bin/3scale_backend
          - start
          - "-e"
          - production
          - "-p"
          - '3000'
          - "-x"
          - "/dev/stdout"
          env:
          - name: CONFIG_REDIS_PROXY
            value: redis://backend-redis:6379/0
          - name: CONFIG_REDIS_SENTINEL_HOSTS
            value: ""
          - name: CONFIG_REDIS_SENTINEL_ROLE
            value: ""
          - name: CONFIG_QUEUES_MASTER_NAME
            value: redis://backend-redis:6379/1
          - name: CONFIG_QUEUES_SENTINEL_HOSTS
            value: ""
          - name: CONFIG_QUEUES_SENTINEL_ROLE
            value: ""
          - name: RACK_ENV
            value: "production"
          - name: CONFIG_INTERNAL_API_USER
            value: "${SYSTEM_BACKEND_USERNAME}"
          - name: CONFIG_INTERNAL_API_PASSWORD
            value: "${SYSTEM_BACKEND_PASSWORD}"
          - name: PUMA_WORKERS
            value: "16"
          image: amp-backend:latest
          imagePullPolicy: IfNotPresent
          name: backend-listener
          resources:
            limits:
              cpu: 1000m
              memory: 700Mi
            requests:
              cpu: 500m
              memory: 550Mi
          livenessProbe:
            initialDelaySeconds: 30
            periodSeconds: 10
            tcpSocket:
              port: 3000
          readinessProbe:
            httpGet:
              path: "/status"
              port: 3000
            initialDelaySeconds: 30
            timeoutSeconds: 5
          ports:
          - containerPort: 3000
            protocol: TCP
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - backend-listener
        from:
          kind: ImageStreamTag
          name: amp-backend:latest



